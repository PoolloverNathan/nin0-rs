use feature 'say';
*@ = *!;
my @roles = qw(guest user bot system mod admin);
print <<"rust";
// -------------------------------------------
rust
$_ = `bash -c 'figlet NOTICE' 2>&1`;
s(^)(\/\/ )g;
print;
print <<"rust";
// 
// THIS FILE IS AUTOGENERATED. DO NOT EDIT.
// See ../update-roles.pl for details.
// -------------------------------------------

use std::ops::*;

#[repr(u8)]
#[derive(PartialEq, Eq, PartialOrd, Ord, Clone, Copy, Debug)]
pub enum Role {

rust
foreach (@roles) {
	say "    ", ucfirst, ",";
}
print <<"rust";
}

#[derive(PartialEq, Eq, PartialOrd, Ord, Clone, Copy, Debug, Default)]
pub struct Roles(usize);
impl Roles {
	#[inline]
	fn has(self, o: impl Into<Self>) -> bool {
		let o = o.into();
		self & o == o
	}
	#[inline]
	fn with(self, o: impl Into<Self>, b: bool) -> Self {
		let o = o.into();
		if b {
			self | o
		} else {
			self - o
		}
	}
	#[inline]
	fn set(&mut self, o: impl Into<Self>, b: bool) {
		*self = self.with(o, b);
	}
rust
our $i = "    ";
our $n = 0;
foreach (@roles) {
	my $b = 1 << $n++;
	$_ = <<"rust";
	pub const ${\(uc)}: Self = Self($b);
	#[inline]
	pub fn is_$_(self) -> bool {
		self.has(Role::${\ucfirst})
	}
	#[inline]
	pub fn with_$_(self, is_$_: bool) -> Self {
		self.with(Role::${\ucfirst}, is_$_)
	}
	#[inline]
	pub fn set_$_(&mut self, is_$_: bool) {
		self.set(Role::${\ucfirst}, is_$_)
	}

rust
	s/\t/    /g;
	print;
}
print <<"rust";
}

impl From<Role> for Roles {
	fn from(value: Role) -> Self {
		(1 << value as u8 as usize).into()
	}
}

impl From<usize> for Roles {
	fn from(value: usize) -> Self {
		Self(value)
	}
}

impl<T: Into<Roles>> BitOr<T> for Roles {
	type Output = Self;
	fn bitor(self, o: T) -> Self {
		Self(self.0 | o.into().0)
	}
}

impl<T: Into<Roles>> BitAnd<T> for Roles {
	type Output = Self;
	fn bitand(self, o: T) -> Self {
		Self(self.0 & o.into().0)
	}
}

impl<T: Into<Roles>> Sub<T> for Roles {
	type Output = Self;
	fn sub(self, o: T) -> Self {
		Self(self.0 & !o.into().0)
	}
}

impl Not for Roles {
	type Output = Self;
	fn not(self) -> Self {
		Self(!self.0)
	}
}
rust
